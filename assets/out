#!/usr/bin/env bash

CURDIR=$(exec 2>/dev/null;cd -- "$(dirname "${BASH_SOURCE[0]}")"; unset PWD; /usr/bin/pwd || /bin/pwd || pwd)

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# shellcheck source=/dev/null
. "$CURDIR/common"

source=$1

if [ -z "$source" ]; then
    echo "usage: $0 <path/to/source>"
    exit 1
fi

cd "$source"

# Read inputs.
payload=$(mktemp "$TMPDIR/kangal-request.XXXXXX")
cat > "$payload" <&0

proxyHost=$(jq -r '.source.proxy_host // ""' < "$payload")
plan=$(jq -r '.params.plan // ""' < "$payload")
data=$(jq -r '.params.data // ""' < "$payload")
vars=$(jq -r '.params.vars // ""' < "$payload")
distributedPods=$(jq -r '.params.pods // 1' < "$payload")
tags=$(\
    jq -c -M -r \
        --arg 'timestamp' "$(echo "$($DATE +'%s%N' -u)/1000000" | bc)" \
        --arg 'source' 'concourse' \
        --arg buildId "${BUILD_ID}" \
        '[((.source.tags // {}) | .timestamp = $timestamp | .source = $source | ."concourse-build-id" = $buildId) | to_entries[] | "\(.key):\(.value)"] | join(",")' < "$payload" \
)
type=$(jq -r '.params.type // "JMeter"' < "$payload")
overwrite=$(jq -r '.params.overwrite // "false"' < "$payload")

# Validation
if [ -n "$plan" ] && [ ! -f "$plan" ]; then
    echo "test plan '$plan' does not exist"
    exit 1
fi

if [ -n "$data" ] && [ ! -f "$data" ]; then
    echo "test data '$data' does not exist"
    exit 1
fi

if [ -n "$vars" ] && [ ! -f "$vars" ]; then
    echo "environment variables file '$vars' does not exist"
    exit 1
fi

if [[ -n "$proxyHost" ]]; then
    KANGAL_PROXY_HOST="$proxyHost"
fi

# Printing inputs
echo "KANGAL_PROXY_HOST: $KANGAL_PROXY_HOST"
echo "LOAD_TEST_FILE: $plan"
echo "LOAD_TEST_DATA: $data"
echo "LOAD_TEST_DISTRIBUTED_PODS: $distributedPods"
echo "LOAD_TEST_TAGS: $tags"
echo "LOAD_TEST_TYPE: $type"
echo "LOAD_TEST_OVERWRITE: $overwrite"

# Optionals
if [ -n "$vars" ]; then
    echo "LOAD_TEST_ENV_VARS: $vars"
fi

echo

if [ -n "$data" ]; then
    echo "Data Lines:"
    wc -l "$data"
    echo

    echo "Data Size:"
    du -sh "$data"
    echo
fi

req="
curl -vvv -s http://$KANGAL_PROXY_HOST/load-test
  -H 'Content-Type: multipart/form-data'
  -F distributedPods=$distributedPods
  -F testFile=@$plan
  -F testData=@$data
  -F tags=$tags
  -F type=$type
  -F overwrite=$overwrite
"

opt=""
if [ -n "$vars" ]; then
    opt="$opt -F envVars=@$vars"
fi

echo "executing: $req $opt"

echo

loadtest=$(\
    curl -vvv -s "http://$KANGAL_PROXY_HOST/load-test" \
        -H 'Content-Type: multipart/form-data' \
        -F distributedPods="$distributedPods" \
        -F testFile=@"$plan" \
        -F testData=@"$data" \
        -F tags="$tags" \
        -F type="$type" \
        -F overwrite="$overwrite" \
        $opt
)

echo

loadtestName=$(echo "$loadtest" | jq -r '.loadtestName // ""')

if [[ -z "$loadtestName" ]]; then
    echo "could not run load test" >&2
    exit 1
fi

version=$(\
    jq -c -M -n \
        --argjson version "$(get_version "$loadtest")" \
        --argjson metadata "$(get_metadata "$loadtest")" \
        '{version: $version, metadata: $metadata}' \
)

echo "$version" | jq .

echo "$version" >&3
